version: '3.8'

services:
  # Main application
  app:
    build: 
      context: .
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://cryptouniverse:password@db:5432/cryptouniverse_enterprise
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    restart: unless-stopped
    networks:
      - cryptouniverse_network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cryptouniverse_enterprise
      POSTGRES_USER: cryptouniverse
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptouniverse -d cryptouniverse_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cryptouniverse_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cryptouniverse_network

  # Celery worker for background tasks
  celery_worker:
    build:
      context: .
      target: production
    command: celery -A app.celery.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://cryptouniverse:password@db:5432/cryptouniverse_enterprise
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    restart: unless-stopped
    networks:
      - cryptouniverse_network

  # Celery beat scheduler
  celery_beat:
    build:
      context: .
      target: production
    command: celery -A app.celery.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://cryptouniverse:password@db:5432/cryptouniverse_enterprise
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    restart: unless-stopped
    networks:
      - cryptouniverse_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - certbot_certs:/etc/letsencrypt
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - cryptouniverse_network

  # Database migration service (runs once)
  migrate:
    build:
      context: .
      target: production
    command: alembic upgrade head
    environment:
      - DATABASE_URL=postgresql://cryptouniverse:password@db:5432/cryptouniverse_enterprise
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cryptouniverse_network
    profiles:
      - migration

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  certbot_certs:
    driver: local

networks:
  cryptouniverse_network:
    driver: bridge
