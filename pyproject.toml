[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cryptouniverse-enterprise"
dynamic = ["version"]
description = "Multi-tenant AI-powered cryptocurrency trading platform"
readme = "README.md"
license = "MIT"
requires-python = ">=3.13"
authors = [
    { name = "CryptoUniverse Team", email = "dev@cryptouniverse.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "databases[postgresql]>=0.8.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pydantic>=2.5.1",
    "pydantic-settings>=2.1.0",
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    "celery>=5.3.4",
    "redis>=5.0.1",
    "aioredis>=2.0.1",
    "stripe>=7.8.0",
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "python-dotenv>=1.0.0",
    "numpy>=1.25.2",
    "pandas>=2.1.4",
    "websockets>=12.0",
    "ccxt>=4.1.0",  # Unified crypto exchange library
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "ruff>=0.1.6",
    "pre-commit>=3.5.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
    "locust>=2.17.0",  # Load testing
]

[project.urls]
Homepage = "https://github.com/yourusername/cryptouniverse-enterprise"
Documentation = "https://docs.cryptouniverse.com"
Repository = "https://github.com/yourusername/cryptouniverse-enterprise.git"
Issues = "https://github.com/yourusername/cryptouniverse-enterprise/issues"

[tool.hatch.version]
path = "app/__init__.py"

[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "celery.*",
    "redis.*",
    "stripe.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
