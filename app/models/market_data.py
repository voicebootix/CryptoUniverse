"""
Market data models for storing trading and analysis data.

Enhanced models with proper precision for financial calculations.
"""

from datetime import datetime
from typing import Optional, Dict, Any
from decimal import Decimal

from sqlalchemy import Column, String, Numeric, DateTime, Integer, Boolean, Text, ForeignKey, Index
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import uuid

from app.core.database import Base


class MarketData(Base):
    """Real-time and historical market data."""

    __tablename__ = "market_data"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(50), nullable=False)
    timestamp = Column(DateTime(timezone=True), nullable=False, index=True)

    # Price data with appropriate precision for crypto
    open_price = Column(Numeric(20, 8), nullable=False)
    high_price = Column(Numeric(20, 8), nullable=False)
    low_price = Column(Numeric(20, 8), nullable=False)
    close_price = Column(Numeric(20, 8), nullable=False)

    # Volume with high precision
    volume = Column(Numeric(30, 8), nullable=False)
    quote_volume = Column(Numeric(30, 8), nullable=True)

    # Additional market metrics
    vwap = Column(Numeric(20, 8), nullable=True)  # Volume Weighted Average Price
    trade_count = Column(Integer, nullable=True)

    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    # Composite indexes for performance
    __table_args__ = (
        Index('idx_market_data_symbol_timestamp', 'symbol', 'timestamp'),
        Index('idx_market_data_exchange_timestamp', 'exchange', 'timestamp'),
    )


class TradingSignal(Base):
    """Trading signals generated by AI strategies."""

    __tablename__ = "trading_signals"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    strategy_id = Column(String(100), nullable=False, index=True)
    symbol = Column(String(20), nullable=False, index=True)

    # Signal details
    signal_type = Column(String(10), nullable=False)  # BUY, SELL, HOLD
    strength = Column(Numeric(5, 2), nullable=False)  # Signal strength 0-100
    confidence = Column(Numeric(5, 2), nullable=False)  # Confidence 0-100

    # Price targets and risk management
    entry_price = Column(Numeric(20, 8), nullable=True)
    stop_loss = Column(Numeric(20, 8), nullable=True)
    take_profit = Column(Numeric(20, 8), nullable=True)

    # Risk metrics
    risk_score = Column(Numeric(5, 2), nullable=True)  # Risk score 0-100

    # Signal metadata
    timeframe = Column(String(10), nullable=True)  # 1m, 5m, 1h, 4h, 1d
    indicators_used = Column(JSONB, nullable=True)

    # Status tracking
    status = Column(String(20), nullable=False, default='active')
    expires_at = Column(DateTime(timezone=True), nullable=True)

    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())


class BacktestResult(Base):
    """Backtest results for trading strategies."""

    __tablename__ = "backtest_results"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    strategy_id = Column(String(100), nullable=False, index=True)
    symbol = Column(String(20), nullable=False)

    # Backtest period
    start_date = Column(DateTime(timezone=True), nullable=False)
    end_date = Column(DateTime(timezone=True), nullable=False)

    # Performance metrics with corrected precision for percentages (0-100 range)
    total_return = Column(Numeric(8, 4), nullable=False)  # Can be > 100%
    annual_return = Column(Numeric(8, 4), nullable=False)
    max_drawdown = Column(Numeric(6, 4), nullable=False)  # Max 99.99%
    sharpe_ratio = Column(Numeric(8, 4), nullable=True)
    sortino_ratio = Column(Numeric(8, 4), nullable=True)

    # Trading statistics
    total_trades = Column(Integer, nullable=False)
    winning_trades = Column(Integer, nullable=False)
    losing_trades = Column(Integer, nullable=False)
    win_rate = Column(Numeric(5, 2), nullable=False)  # Fixed: 0-100% with 2 decimals

    # Risk metrics
    volatility = Column(Numeric(8, 4), nullable=True)
    beta = Column(Numeric(6, 4), nullable=True)
    alpha = Column(Numeric(8, 4), nullable=True)

    # Capital metrics
    initial_capital = Column(Numeric(20, 8), nullable=False)
    final_capital = Column(Numeric(20, 8), nullable=False)

    # Additional metrics
    avg_trade_return = Column(Numeric(8, 4), nullable=True)
    profit_factor = Column(Numeric(8, 4), nullable=True)

    # Configuration
    parameters = Column(JSONB, nullable=True)

    created_at = Column(DateTime(timezone=True), server_default=func.now())


class StrategyPerformance(Base):
    """Live strategy performance tracking."""

    __tablename__ = "strategy_performance"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    strategy_id = Column(String(100), nullable=False, index=True)
    user_id = Column(UUID(as_uuid=True), nullable=False, index=True)
    symbol = Column(String(20), nullable=False)

    # Performance tracking period
    start_date = Column(DateTime(timezone=True), nullable=False)
    last_updated = Column(DateTime(timezone=True), nullable=False)

    # Live performance metrics
    total_return = Column(Numeric(8, 4), nullable=False, default=0)
    unrealized_pnl = Column(Numeric(20, 8), nullable=False, default=0)
    realized_pnl = Column(Numeric(20, 8), nullable=False, default=0)

    # Trade statistics
    total_trades = Column(Integer, nullable=False, default=0)
    winning_trades = Column(Integer, nullable=False, default=0)
    losing_trades = Column(Integer, nullable=False, default=0)
    win_rate = Column(Numeric(5, 2), nullable=False, default=0)  # Fixed: 0-100% with 2 decimals

    # Risk metrics
    max_drawdown = Column(Numeric(6, 4), nullable=False, default=0)
    current_drawdown = Column(Numeric(6, 4), nullable=False, default=0)

    # Capital allocation
    allocated_capital = Column(Numeric(20, 8), nullable=False)
    current_value = Column(Numeric(20, 8), nullable=False)

    # Status
    is_active = Column(Boolean, nullable=False, default=True)

    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    # Indexes for performance
    __table_args__ = (
        Index('idx_strategy_performance_user_strategy', 'user_id', 'strategy_id'),
        Index('idx_strategy_performance_active', 'is_active', 'last_updated'),
    )


class MarketIndicator(Base):
    """Technical indicators calculated from market data."""

    __tablename__ = "market_indicators"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    symbol = Column(String(20), nullable=False, index=True)
    indicator_name = Column(String(50), nullable=False)
    timeframe = Column(String(10), nullable=False)
    timestamp = Column(DateTime(timezone=True), nullable=False, index=True)

    # Indicator values (flexible storage)
    value = Column(Numeric(20, 8), nullable=True)
    values = Column(JSONB, nullable=True)  # For multi-value indicators like Bollinger Bands

    # Calculation metadata
    parameters = Column(JSONB, nullable=True)

    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # Composite index for fast lookups
    __table_args__ = (
        Index('idx_market_indicators_symbol_name_time', 'symbol', 'indicator_name', 'timestamp'),
    )


# Relationship definitions would go here if needed
# For example, linking to User model, Strategy model, etc.